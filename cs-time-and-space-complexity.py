# # task 3 of 5 - 

# def csSortedTwoSum(numbers, target):
#     numbers.sort()
#     (low, high) = (0, len(numbers) - 1)

#     while low < high:
#         if numbers[low] + numbers[high] == target:
#             a = numbers[low]
#             b = numbers[high]

#             return print(numbers.index(a), numbers.index(b))

#         if numbers[low] + numbers[high] < target:
#             low = low + 1
#         else:
#             high = high - 1
    
# csSortedTwoSum([4, 1, 0, 6, 8], 10)

# task 4 of 5 - You are given two strings, str_1 and str_2, where str_2 is generated by randomly shuffling str_1 and then adding one letter at a random position. Write a function that returns the letter that was added to str_2.

"""

def csFindAddedLetter(str_1, str_2): #INCOMPLETE
    s1 = list(str_1)
    s2 = list(str_2)

    s1.sort()
    s2.sort()
    print(s1, s2)

    for i in s2:
        if i not in s1:
            return print(i)

csFindAddedLetter('b', 'bb')

"""

# task 5 of 5 - Given a string, write a function that returns the index of the first unique (non-repeating) character. If there isn't a unique (non-repeating) character, return -1.

def csFirstUniqueChar(input_str):         
    lst = list(input_str)                   # turn the input string into a list
    numList = []                            # initialize an empty array that we will use later
    for i in lst:                           # loop through the list
        numList.append(lst.count(i))        # for each item in the list, count the number of times that item appears. Add that number (count()) to the empty array.
    if 1 not in numList:                    # if there isn't a letter that only appears once, return -1
        x = -1
        print(x)
        return x
    else:                                   # else, get the index of the first 1 in the array. 
        x = numList.index(1)
        print(x)
        return x

csFirstUniqueChar('vvv')